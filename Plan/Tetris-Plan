

# Tetris Plan

## Overview and Concept:
A grid-based game based on the class arcade game Tetris using JavaScript, HTML and CSS

## MVP
* Pieces move down at an interval
* User can rotate pieces
* User can move pieces L and R
* Pieces stack on bottom of grid
* Randomly selects next piece
* Full row clears the row, other pieces move down
* Filling to top row ends the game
* Score and line count go up with each cleared row
* Functional start, pause, resume, and quit buttons

## Extra Goals
* Display upcoming piece
* High scores with name and local storage
* User can drop pieces faster
* "Ghost" piece to show where it will land
* Interval of fall speeds up as rows are cleared
* Rotate buttons for clockwise and counterclockwise

## Wireframes
### Start 
![Start](./Wireframes/start-wireframe.png)

### Play
![Play](./Wireframes/play-wireframe.png)

### Paused
![Pause](./Wireframes/paused-wireframe.png)

### End of Game
![End](./Wireframes/end-wireframe.png)

## HTML
* Buttons and scoreboards with spans
* Grid divs will be generated using Javascript

## CSS
* Classes for:
  * cells occupied by a piece (in play or out of play)
  * cells that are part of piece in-play
  * cells that are stacked and out-of-play
  * each type of piece for corresponding color


## Controls
* Left arrow for Left
* Right arrow for Right
* Q for rotate clockwise

  * Possibly W for rotate counter-clockwise
  * Possibly Down arrow to drop faster

* Start, pause, resume, and quit using on screen buttons

![Keyboard](./Wireframes/keyboard-controls-wireframe.png)


## Grid
![Grid](./Wireframes/tetris-board-wireframe.png)

## Pieces
* Arrays containing each piece and its rotations

* Example for "T" piece starting position array calculated using the top left corner as the reference position

### [position + 1,   position + width,   position + width + 1,   position + width + 2]

![T](./Wireframes/t-start.png)


### Complete Diagram of Pieces and Rotations
![Pieces](./Wireframes/pieces-wireframe.png)

## Random Piece Selection
* Object containing the arrays of the 7 possible pieces in their starting orientations
* Math.random to select a a piece

## Left and Right Movement
* Click events to add 1 or subtract 1 from the index numbers of cells occupied by the piece in-play

## Falling Movement
* Start pieces from starting reference position at index 3 and fill other cells relative to that one
* setInterval to add + width to the index numbers of cells occupied by the piece in-play

## Rotation Movement
* During game play, keep track of current reference position by adding interval and L and R movements to it
* On rotation, remove class from current in play cells and add to new cells using the rotation array values calculated from the current reference point
* Have an variable for how many rotations from start it has done to calculate which array version to use for the new cells. Number of rotations % 4 = 0 would bring back to the starting position

## Edge Behavior
* Don't allow rotations or left or right movements if doing so would require a cell at index % 10 = 0 to go left or a cell at index % 10 = 9 to go right
* Don't add/remove any classes and don't change the current reference position 

## Landing 
* Stop interval if the index of the next cell is betweeen 190 and 199 OR if index of would-be next cell already has classes occupied and out-of-play
* Clear interval, remove class in play from active piece and add class out of play

## Clearing a Row
* If all cells between index % 10 = 0 and index % 10 = 9 of the same row have class occupied, clear the row
* Remove classes occupied, in-play, and out-of-play from that row


## Moving Rows Following a Clear
* After a row is cleared, add + width to all the occupied cells with an index lower than the lowest index of that row

## Filling Highest Row (End Game)
* If a cell has class out-of-play AND index between 0 and 9, the game is over
* Stop interval
* Clear grid, removing all occupied classes and in-play or out-of-play
* Display game over div and final score

## Start Button
* Take input from name span
* Removes Tetris div and name div
* Selects random piece
* Adds class to cells to display piece
* Starts interval to fall

## Pause Button
* Stops interval
* Hides game grid
* Shows paused div, resume, and quit buttons

## Resume Button
* Hides paused div, resume, and quit buttons
* Starts fall interval

## Quit Button
* Clears grid, removing all occupied classes and in-play or out-of-play
* Reset score and line count
* Display start div and name input span

## Play Again Button
* Clear game over screen
* Back to start screen

## Name Input and High Score Local Storage
* On page load, get high score info and display in HTML
* On end of game and quit game, check if current score is > high score. Update high score with name and new score vlaue

##

